What happens when you initialize a repository? Why do you need to do it?It creates a .git folder and is ready for you to add files to the repository (but the repository is created empty)How is the staging area different from the working directory and the repository? What value do you think it offers?It allows you to operate on multiple files at once before committing them to the repository. This allows you to make sure you have everything you want before you commit (and can check with git status before you do)How can you use the staging area to make sure you have one commit per logical change?Only add/stage and commit one file at a time and run git status each time to ensure you are.What are some situations when branches would be helpful in keeping your history organized? How would branches help?to allow you to make changes that don't affect the main/shipping version of your app. To allow multiple users to work on their own version of the repository and test before committing to the main branchHow do the diagrams help you visualize the branch structure?to see the parent relationship, branches and unreachable nodesWhat is the result of merging two branches together? Why do we represent it in the diagram the way we do?the changes made on each branch are analyzed to determine what lines should be added or deleted to the new merged branch. We represent it as a new node with both parents to indicate that it contains all the changes from both branches.What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?For changes in branches that are completely independent, automatic merging works great. But in cases where branches have changes in the same files, you need to use the merge tools and possibly consult with others who made changes to determine the best approach for merging. Oh, and test.